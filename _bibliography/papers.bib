
% ironside
@inproceedings{ironside,
title={Ironside: Microsecond-scale Latency SLOs for Network Function Chains},
author={Jianfeng Wang and Siddhant Gupta and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
year={2023},
date = {2023-01-12},
abstract = {Achieving untra-low-latency for NFV.},
url = {https://nsl.usc.edu/people/jianfeng-wang/},
keywords = {NFV, cloud computing, low latency},
booktitle = {under submission},
pubstate = {under submission},
abbr = {ArXiv},
tppubtype = {inproceedings},
selected={true}
}

% PINOLO
@inproceedings{pinolo,
title={Pinolo: Detecting Logical Bugs in Database Management Systems with Approximate Query Synthesis},
author={Zongyin Hao and Quanfeng Huang and Chengpeng Wang and Jianfeng Wang and Yushan Zhang and Rongxin Wu and Charles Zhang},
year={2023},
date = {2023-01-12},
abstract = {DBMSs (Database Management Systems) are essential in modern enterprise software. Thus, ensuring the correctness of DBMSs is critical for enterprise applications. Among various kinds of bugs, logical bugs, which make a DBMS return an incorrect result set for a given SQL query, are the most challenging for detection since they typically do not result in apparent manifestations (e.g., crashes) and are likely to go unnoticed by users. The key challenge of detecting logical bugs is the test oracle problem, i.e., how to automatically characterize the expected results for a given query. The state-of-theart approaches focus on generating the equivalent forms of queries via the customized rules, which rewrite a seed query to achieve the equivalent transformation. This dramatically limits the forms of SQL queries fed to the DBMS and thus leads to the under-reporting of many deeply-hidden logical bugs. In this paper, we propose a novel approach, PINOLO, to constructing a test oracle for logical bugs. Instead of generating the equivalent mutants of a seed query, our idea is to synthesize the queries that theoretically should return a superset or a subset of the result set of the seed query, forming the over-approximations or under-approximations of the seed query. A logical bug is detected if the result set returned by our synthesized query does not follow the expected approximation relation. We implemented our idea as a DBMS testing system and evaluated it on four widely-used DBMSs: MySQL, MariaDB, TiDB, and OceanBase. By the time of writing, PINOLO has found 41 unique logical bugs in these DBMSs, 39 of which have been confirmed by developers.},
url = {https://nsl.usc.edu/people/jianfeng-wang/},
keywords = {Bug-finding, debugging, troubleshooting},
pubstate = {under submission},
booktitle = {under submission},
abbr = {under submission},
tppubtype = {inproceedings},
selected={true}
}

% Quadrant
@inproceedings{socc22-quadrant,
title={Quadrant: A Cloud-Deployable NF Virtualization Platform},
author={Jianfeng Wang and Tamás Lévai and Zhuojin Li and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://dl.acm.org/doi/10.1145/3542929.3563471},
slides = {https://acmsocc.org/2022/assets/slides/59.pdf},
talk={https://youtu.be/70_bUua5870},
year={2022},
date = {2022-11-07},
booktitle = {SoCC '22: Proceedings of the ACM Symposium on Cloud Computing},
abstract = {Network Functions (NFs) now touch a significant fraction of Internet traffic. The hope has been that software-based NF Virtualization (NFV) would enable rapid development of new NFs by vendors and leverage the power and economics of commodity computing infrastructure for NF deployment. To date, no cloud NFV systems achieve NF chaining, isolation, SLO-adherence, and scaling together with existing cloud computing infrastructure and abstractions, all while achieving generality, speed, and ease of deployment; these properties are taken for granted in other cloud contexts but unavailable for NF processing. We present Quadrant, an efficient and secure cloud-deployable NFV system, and show that Quadrant’s approach of adapting existing cloud infrastructure to support packet processing can achieve NF chaining, isolation, generality, and performance in NFV. Quadrant reuses common cloud infrastructure such as Kubernetes, cloud functions, the Linux kernel, NIC hardware, and switches. It enables easy NFV deployment while delivering up to double the performance per core compared to the state of the art.},
keywords = {NFV, cloud computing, SLO},
abbr = {ACM SoCC},
pubstate = {published},
tppubtype = {inproceedings},
selected={true}
}

% Galleon
@inproceedings{arxiv21-galleon,
title={Galleon: Reshaping the Square Peg of NFV}, 
author={Jianfeng Wang and Tamás Lévai and Zhuojin Li and Marcos A. M. Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://arxiv.org/abs/2101.06466},
year={2021},
date = {2021-01-16},
booktitle = {CoRR Jan},
publisher = {arXiv preprint arXiv:2101.06466},
abstract = {Software is often used for Network Functions (NFs) -- such as firewalls, NAT, deep packet inspection, and encryption -- that are applied to traffic in the network. The community has hoped that NFV would enable rapid development of new NFs and leverage commodity computing infrastructure. However, the challenge for researchers and operators has been to align the square peg of high-speed packet processing with the round hole of cloud computing infrastructures and abstractions, all while delivering performance, scalability, and isolation. Past work has led to the belief that NFV is different enough that it requires novel, custom approaches that deviate from today's norms. To the contrary, we show that we can achieve performance, scalability, and isolation in NFV judiciously using mechanisms and abstractions of FaaS, the Linux kernel, NIC hardware, and OpenFlow switches. As such, with our system Galleon, NFV can be practically-deployable today in conventional cloud environments while delivering up to double the performance per core compared to the state of the art.},
keywords = {NFV, cloud computing, SLO},
abbr = {ArXiv},
pubstate = {published},
tppubtype = {inproceedings},
selected={true}
}


% Lemur
@inproceedings{10.1145/3386367.3431292,
title = {Meeting SLOs in Cross-Platform NFV},
author = {Jane* Yen and Jianfeng* Wang and Sucha Supittayapornpong and Marcos A M Vieira and Ramesh Govindan and Barath Raghavan},
url = {https://doi.org/10.1145/3386367.3431292},
code = {https://github.com/USC-NSL/Lemur},
slides = {https://nsl.usc.edu/wp-content/uploads/2020/11/CoNEXT20-Lemur-slides.pdf},
isbn = 9781450379489,
year  = 2020,
date = {2020-01-01},
booktitle = {Proceedings of the 16th International Conference on Emerging Networking EXperiments and Technologies},
pages = {509–523},
publisher = {Association for Computing Machinery},
address = {Barcelona, Spain},
series = {CoNEXT '20},
abstract = {Network Functions (NFs) perform on-path processing of network traffic. ISPs are deploying NF Virtualization (NFV) with software NFs run on commodity servers. ISPs aim to ensure that NF chains, directed acyclic graphs of NFs, do not violate Service Level Objectives (SLOs) promised by the ISP to its customers. To meet SLOs, NFV systems sometimes leverage on-path hardware (such as programmable switches and smart NICs) to accelerate NF execution.Lemur places and executes NF chains across heterogeneous hardware while meeting SLOs. Lemur's novel placement algorithm yields an SLO-satisfying NF placement while weighing many constraints: hardware memory and processing stages, server cores, link capacity, NF profiles, and NF chain interactions. Lemur's metacompiler automatically generates code and rules (in P4, Python, eBPF, C++, and OpenFlow) to stitch cross-platform NF chain execution while also optimizing resource usage. Our experiments show that Lemur is alone among competing strategies in meeting SLOs for canonical NF chains while maximizing marginal throughput (the traffic rate in excess of the service-level objective).},
keywords = {NFV, nsl, PISA switch, service chain},
abbr = {ACM CoNEXT},
pubstate = {published},
tppubtype = {inproceedings},
selected={true}
}

